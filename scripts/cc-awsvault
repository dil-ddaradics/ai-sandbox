#!/usr/bin/env bash
set -euo pipefail
source "$(dirname "$0")/_common.sh"

_need aws-vault
PORT="${PORT:-9099}"
NON_INTERACTIVE=0
PROFILE=""

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    --non-interactive)
      NON_INTERACTIVE=1
      shift
      ;;
    -h|--help)
      echo "Usage: cc-awsvault [OPTIONS] <aws-profile>"
      echo
      echo "Options:"
      echo "  --non-interactive   Run in non-interactive mode (use with automation)"
      echo "  -h, --help          Show this help message"
      echo
      exit 0
      ;;
    -*)
      _red "Unknown option: $1"
      exit 1
      ;;
    *)
      PROFILE="$1"
      shift
      ;;
  esac
done

# Use AWS_PROFILE if no profile provided
if [[ -z "$PROFILE" ]]; then
  PROFILE="${AWS_PROFILE:-}"
fi

[[ -z "$PROFILE" ]] && _die "Usage: cc-awsvault <aws-profile> (or set AWS_PROFILE)"

# already running?
if lsof -i :"$PORT" | grep -q aws-vault; then
  _green "aws-vault credential server already running on port $PORT"
  exit 0
fi

_green "Starting aws-vault --server with profile $PROFILE ..."

# First capture the URL in a temporary run
URL_FILE=$(mktemp)
aws-vault exec "$PROFILE" --ecs-server -- bash -c 'echo $AWS_CONTAINER_CREDENTIALS_FULL_URI > "'$URL_FILE'"'

# Read the URL from the temporary file
if [[ -s "$URL_FILE" ]]; then
  URL=$(cat "$URL_FILE")
  
  # Extract port from URL for monitoring
  PORT=$(echo "$URL" | grep -oE ':[0-9]+' | tr -d ':')
  
  # Modify URL to use host.docker.internal instead of 127.0.0.1 for container access
  if [[ "$URL" == http://127.0.0.1:* ]]; then
    ORIG_URL="$URL"
    URL="http://host.docker.internal:${PORT}/"
    _green "Mapped $ORIG_URL to $URL for container access"
  fi
  
  # Start the long-running server
  _green "Starting persistent credential server..."
  nohup aws-vault exec "$PROFILE" --ecs-server -- sleep infinity >/dev/null 2>&1 &
  SERVER_PID=$!
  
  # Verify the server is running
  sleep 2
  if kill -0 $SERVER_PID 2>/dev/null; then
    _green "Credential server running with PID: $SERVER_PID"
    # Save PID for management
    mkdir -p "$HOME/.cc"
    echo $SERVER_PID > "$HOME/.cc/awsvault_pid"
  else
    _red "Warning: Credential server may have failed to start"
  fi
  
  # Clean up temporary file
  rm "$URL_FILE"
  
  _green "IMDS endpoint: $URL"
else
  rm -f "$URL_FILE"
  
  # Check if the profile exists and has valid credentials
  if ! aws-vault list 2>/dev/null | grep -q "^$PROFILE "; then
    AVAILABLE_PROFILES=$(aws-vault list 2>/dev/null | grep -v "^===" | awk '{print $1}' | tr '\n' ' ')
    _die "Profile '$PROFILE' not found. Available profiles: $AVAILABLE_PROFILES"
  else
    # Check if the profile has sessions
    if ! aws-vault list 2>/dev/null | grep "^$PROFILE " | grep -q "[^ ]* *$"; then
      if [[ "$NON_INTERACTIVE" -eq 1 ]]; then
        _red "Profile '$PROFILE' exists but credentials are missing or expired."
        _red "In non-interactive mode, cannot prompt for login."
        _die "Please login manually with 'aws-vault login $PROFILE' first."
      else
        _yellow "Profile '$PROFILE' exists but credentials are missing or expired."
        read -p "Would you like to login now? [y/N] " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          aws-vault login "$PROFILE"
          # Re-run this script after login
          exec "$0" "$PROFILE"
        else
          _die "Credentials required. Run 'aws-vault login $PROFILE' first."
        fi
      fi
    else
      _die "Failed to start credential server for profile '$PROFILE'. Check aws-vault configuration."
    fi
  fi
fi

# save URL for future shells
mkdir -p "$HOME/.cc"
echo "$URL" > "$HOME/.cc/awsvault_url"

# still echo so caller can `eval $(cc-awsvault â€¦)` if desired
echo "export IMDS_URL=$URL"