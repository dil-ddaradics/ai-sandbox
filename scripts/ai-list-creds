#!/usr/bin/env bash
# cc-list-creds - Lists running AWS credential servers
set -euo pipefail
source "$(dirname "$0")/_common.sh"

PORT="${PORT:-9099}"
SERVER_PROCESSES=$(pgrep -f "aws-vault.*(--server|--ecs-server)" || echo "")

# Check saved URL file and PID file
if [[ -f "$HOME/.cc/awsvault_url" ]]; then
  SAVED_URL=$(cat "$HOME/.cc/awsvault_url")
  _green "Saved credential server URL:"
  echo "  $SAVED_URL"
  
  # Check if saved PID exists and is valid
  if [[ -f "$HOME/.cc/awsvault_pid" ]]; then
    SAVED_PID=$(cat "$HOME/.cc/awsvault_pid")
    if ps -p "$SAVED_PID" >/dev/null 2>&1 && ps -p "$SAVED_PID" -o command= | grep -q "aws-vault"; then
      echo "  Status: RUNNING (PID: $SAVED_PID)"
    else
      # PID file exists but process is not running
      echo "  Status: NOT RUNNING (stale PID)"
    fi
  else
    # Extract port from saved URL
    SAVED_PORT=$(echo "$SAVED_URL" | grep -oE ':[0-9]+' | tr -d ':')
    if [[ -n "$SAVED_PORT" ]]; then
      # Check if server on this port is actually running
      if lsof -i :"$SAVED_PORT" 2>/dev/null | grep -q aws-vault; then
        echo "  Status: RUNNING (port: $SAVED_PORT)"
      else
        echo "  Status: NOT RUNNING (stale URL)"
      fi
    else
      echo "  Status: UNKNOWN (malformed URL)"
    fi
  fi
  echo ""
fi

# List all running aws-vault servers
_green "Running AWS credential servers:"
if [[ -z "$SERVER_PROCESSES" ]]; then
  echo "  No aws-vault credential servers are currently running"
else
  # Print header
  printf "  %-6s %-10s %-8s %s\n" "PID" "PORT" "AGE" "COMMAND"
  printf "  %-6s %-10s %-8s %s\n" "------" "----------" "--------" "------------------------------"
  
  # For each process, get the port, start time, and command
  for pid in $SERVER_PROCESSES; do
    # Get process start time
    if [[ "$(uname)" == "Darwin" ]]; then
      # macOS
      start_time=$(ps -o lstart= -p "$pid")
      start_epoch=$(date -j -f "%a %b %d %T %Y" "$start_time" "+%s" 2>/dev/null || echo "0")
    else
      # Linux
      start_epoch=$(stat -c %Y /proc/"$pid" 2>/dev/null || echo "0")
      start_time=$(date -d @"$start_epoch" "+%a %b %d %T %Y" 2>/dev/null || echo "Unknown")
    fi
    
    # Calculate age
    now=$(date +%s)
    age_seconds=$((now - start_epoch))
    
    # Format age
    if [[ $age_seconds -lt 60 ]]; then
      age="${age_seconds}s"
    elif [[ $age_seconds -lt 3600 ]]; then
      age="$((age_seconds / 60))m"
    elif [[ $age_seconds -lt 86400 ]]; then
      age="$((age_seconds / 3600))h"
    else
      age="$((age_seconds / 86400))d"
    fi
    
    # Get command and port
    cmd=$(ps -o command= -p "$pid")
    
    # Try to get port from command first for old --server --listen format
    port=$(echo "$cmd" | grep -oE 'listen[^:]*:([0-9]+)' | cut -d: -f2)
    
    # If not found, try to get port from listening socket for --ecs-server format
    if [[ -z "$port" ]]; then
      port=$(lsof -a -p "$pid" -i -P 2>/dev/null | grep -oE ':[0-9]+' | tr -d ':' | head -1)
    fi
    
    # Format output
    if [[ -z "$port" ]]; then
      port="unknown"
    fi
    
    printf "  %-6s %-10s %-8s %s\n" "$pid" "$port" "$age" "$cmd"
  done
fi

echo ""
_green "Management commands:"
echo "  cc-awsvault <profile>     # Start credential server"
echo "  cc-awsvault-stop          # Stop credential server"
echo "  cc-clean --all            # Clean worktree and stop credential server"