#!/usr/bin/env bash
set -euo pipefail
source "$(dirname "$0")/_common.sh"
_need docker
_need git

# Get repository root path (works in both main repo and worktrees)
REPO_ROOT="$(git rev-parse --show-toplevel)"
REPO_NAME="$(basename "$REPO_ROOT")"

# Parse arguments
YES_FLAG=false
TARGET_BRANCH=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    -y|--yes)
      YES_FLAG=true
      shift
      ;;
    -h|--help)
      echo "Usage: cc-up [OPTIONS] [BRANCH_NAME]"
      echo
      echo "Options:"
      echo "  -y, --yes    Automatically answer yes to all prompts"
      echo "  -h, --help   Show this help message"
      echo
      exit 0
      ;;
    -*)
      _red "Unknown option: $1"
      exit 1
      ;;
    *)
      TARGET_BRANCH="$1"
      shift
      break
      ;;
  esac
done

# If no branch name provided after option, use current branch
if [[ -z "$TARGET_BRANCH" ]]; then
  TARGET_BRANCH="$(git symbolic-ref --quiet --short HEAD)"
  [[ -z "$TARGET_BRANCH" ]] && _die "Not on a branch; either specify a branch or checkout one"
fi
  
# Check if the branch exists
if ! git show-ref --verify --quiet "refs/heads/$TARGET_BRANCH"; then
  if $YES_FLAG; then
    _green "Automatically creating branch '$TARGET_BRANCH'"
    git branch "$TARGET_BRANCH"
  else
    # Branch doesn't exist, offer to create it
    read -p "Branch '$TARGET_BRANCH' doesn't exist. Create it? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      git branch "$TARGET_BRANCH"
    else
      _die "Branch '$TARGET_BRANCH' doesn't exist"
    fi
  fi
fi

# Determine if we're in a worktree
IS_WORKTREE=false
CURRENT_DIR="$(pwd)"
WORKTREE_LIST="$(git worktree list --porcelain)"

# Check if current directory is a worktree
if echo "$WORKTREE_LIST" | grep -q "worktree $CURRENT_DIR"; then
  IS_WORKTREE=true
  CURRENT_BRANCH="$(git symbolic-ref --quiet --short HEAD)"
  
  # If we're in a worktree and target is different branch, warn user
  if [[ "$CURRENT_BRANCH" != "$TARGET_BRANCH" ]]; then
    _red "Warning: You're in worktree for branch '$CURRENT_BRANCH' but targeting '$TARGET_BRANCH'"
    if $YES_FLAG; then
      _green "Automatically continuing due to --yes flag"
    else
      read -p "Continue? [y/N] " -n 1 -r
      echo
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 0
      fi
    fi
  fi
fi

# Set up worktree path and container name
WORKTREE_DIR="$WT_ROOT/$REPO_NAME/$TARGET_BRANCH"
# Include repo name in container name to avoid collisions between different repos
CTR="cc-${REPO_NAME}-${TARGET_BRANCH//\//-}"

# Check if container already exists and is running
if docker ps --format "{{.Names}}" | grep -q "^$CTR$"; then
  _green "Container $CTR is already running for $TARGET_BRANCH"
  _green "Worktree is at $WORKTREE_DIR"
  exit 0
fi

# Check if container exists but is stopped
if docker ps -a --format "{{.Names}}" | grep -q "^$CTR$"; then
  _green "Starting existing container $CTR for $TARGET_BRANCH"
  docker start "$CTR"
  exit 0
fi

# Ensure worktree exists
if [[ ! -d "$WORKTREE_DIR" ]]; then
  _green "Creating worktree for $TARGET_BRANCH at $WORKTREE_DIR"
  
  # Check if this is the main branch and we're in the main worktree
  MAIN_BRANCH=$(git symbolic-ref --short refs/remotes/origin/HEAD 2>/dev/null | sed 's#^origin/##' || echo "master")
  CURRENT_BRANCH="$(git symbolic-ref --quiet --short HEAD)"
  
  if [[ "$TARGET_BRANCH" == "$MAIN_BRANCH" && "$CURRENT_BRANCH" == "$TARGET_BRANCH" ]]; then
    _yellow "Warning: Attempting to create a worktree for the same branch ($TARGET_BRANCH) that we're currently on."
    _green "Will use current directory as the worktree instead of creating a new one."
    # Use the current directory as the worktree
    WORKTREE_DIR="$REPO_ROOT"
  else
    # Try to add the worktree, handle errors
    if ! git worktree add "$WORKTREE_DIR" "$TARGET_BRANCH" 2>/dev/null; then
      # Check if worktree already exists elsewhere
      EXISTING_WORKTREE=$(git worktree list | grep "$TARGET_BRANCH" | awk '{print $1}')
      
      if [[ -n "$EXISTING_WORKTREE" ]]; then
        _yellow "Worktree for $TARGET_BRANCH already exists at $EXISTING_WORKTREE"
        _green "Using existing worktree location"
        WORKTREE_DIR="$EXISTING_WORKTREE"
      else
        _red "Failed to create worktree. Trying alternate method..."
        # Try to prune any stale worktrees
        git worktree prune
        # Try again
        git worktree add "$WORKTREE_DIR" "$TARGET_BRANCH" || _die "Could not create worktree for $TARGET_BRANCH"
      fi
    fi
  fi
fi

# Check if IMDS_URL is available, but don't fail if not - dynamic credential handling will try to load it
if [[ -z "${IMDS_URL:-}" ]]; then
  if [[ -f "$HOME/.cc/awsvault_url" ]]; then
    IMDS_URL=$(< "$HOME/.cc/awsvault_url")
    _green "Using saved IMDS_URL from $HOME/.cc/awsvault_url"
  else
    _yellow "Warning: IMDS_URL not found. Container will attempt to load credentials dynamically."
    _yellow "Run cc-awsvault <profile> first for immediate availability."
    IMDS_URL=""
  fi
fi

# compose env file
ENV_FILE="$WORKTREE_DIR/.env.compose"

cat >"$ENV_FILE" <<EOF
WORKTREE=$WORKTREE_DIR
HOME=$HOME
IMDS_URL=$IMDS_URL
CC_CONTAINER_NAME=$CTR
CLAUDE_CODE_USE_BEDROCK=$CLAUDE_CODE_USE_BEDROCK
ANTHROPIC_MODEL=$ANTHROPIC_MODEL
CC_BRANCH=$TARGET_BRANCH
CPU_LIMIT=$CPU_LIMIT
MEM_LIMIT=$MEM_LIMIT
EOF

# Start container
# Check if docker compose subcommand exists, otherwise use docker-compose
# Also set the build context to the repository root where scripts/container is located
if docker compose version &>/dev/null; then
  cd "$REPO_ROOT" && docker compose --env-file "$ENV_FILE" -f "$REPO_ROOT/docker-compose.yml" up --build -d dev
else
  # Use docker-compose for older versions
  cd "$REPO_ROOT" && docker-compose --env-file "$ENV_FILE" -f "$REPO_ROOT/docker-compose.yml" up --build -d dev
fi

echo "$CTR" > "$WORKTREE_DIR/.cc-container"
_green "âœ” Container $CTR running for $TARGET_BRANCH at $WORKTREE_DIR"